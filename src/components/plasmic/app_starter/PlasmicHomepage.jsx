// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ioWQ2wgU4sMaVJzRBghNsW
// Component: _iW7C5BSC4RQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: ioWQ2wgU4sMaVJzRBghNsW/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: _iW7C5BSC4RQ/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: p.generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: p.generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form),
                    extendedOnValuesChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: [
                      { label: "Name", name: "name", inputType: "Text" },
                      {
                        label: "Message",
                        name: "message",
                        inputType: "Text Area"
                      }
                    ],

                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "vertical",
                    mode: "advanced",
                    onIsSubmittingChange:
                      p.generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form"] = ref;
                    },
                    submitSlot: null,
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  p.initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"form"}
                      data-plasmic-override={overrides.form}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__mrFJy
                        )}
                        label={"Name"}
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input", "value"],
                                AntdInput_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "input",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input"}
                              data-plasmic-override={overrides.input}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__kw3Hr
                        )}
                        label={"Name"}
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input2),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input2", "value"],
                                AntdInput_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "input2",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input2.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input2"}
                              data-plasmic-override={overrides.input2}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__rTcX6
                        )}
                        label={"Name"}
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input3),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input3", "value"],
                                AntdInput_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "input3",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input3.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input3"}
                              data-plasmic-override={overrides.input3}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__nMcGo
                        )}
                        label={"Name"}
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input4),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input4", "value"],
                                AntdInput_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "input4",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input4.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input4"}
                              data-plasmic-override={overrides.input4}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField___4EyDv
                        )}
                        label={"Name"}
                        name={"name"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames("__wab_instance", sty.input5),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["input5", "value"],
                                AntdInput_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "input5",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "input5.value"
                              }
                            ],

                            [],
                            AntdInput_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdInput
                              data-plasmic-name={"input5"}
                              data-plasmic-override={overrides.input5}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__aJ35N
                        )}
                        label={"Message"}
                        name={"message"}
                      >
                        {(() => {
                          const child$Props = {
                            className: classNames(
                              "__wab_instance",
                              sty.textArea
                            ),
                            onChange:
                              p.generateStateOnChangePropForCodeComponents(
                                $state,
                                "value",
                                ["textArea", "value"],
                                AntdTextArea_Helpers
                              ),
                            value: p.generateStateValueProp($state, [
                              "textArea",
                              "value"
                            ])
                          };
                          p.initializeCodeComponentStates(
                            $state,
                            [
                              {
                                name: "value",
                                plasmicStateName: "textArea.value"
                              }
                            ],

                            [],
                            AntdTextArea_Helpers ?? {},
                            child$Props
                          );
                          return (
                            <AntdTextArea
                              data-plasmic-name={"textArea"}
                              data-plasmic-override={overrides.textArea}
                              {...child$Props}
                            />
                          );
                        })()}
                      </FormItemWrapper>
                      <AntdButton
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames("__wab_instance", sty.button)}
                        submitsForm={true}
                        type={"primary"}
                      >
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    </FormWrapper>
                  );
                })()}
              </div>
            </div>
          </section>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "columns",
    "column",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "textArea",
    "button",
    "text"
  ],

  section: [
    "section",
    "columns",
    "column",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "textArea",
    "button",
    "text"
  ],

  columns: [
    "columns",
    "column",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "textArea",
    "button",
    "text"
  ],

  column: [
    "column",
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "textArea",
    "button",
    "text"
  ],

  form: [
    "form",
    "input",
    "input2",
    "input3",
    "input4",
    "input5",
    "textArea",
    "button",
    "text"
  ],

  input: ["input"],
  input2: ["input2"],
  input3: ["input3"],
  input4: ["input4"],
  input5: ["input5"],
  textArea: ["textArea"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard(WrappedComponent) {
  const PageGuard = props => (
    <p.PlasmicPageGuard
      minRole={null}
      appId={"ioWQ2wgU4sMaVJzRBghNsW"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </p.PlasmicPageGuard>
  );

  return PageGuard;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ioWQ2wgU4sMaVJzRBghNsW"
    });
    return (
      <p.PlasmicDataSourceContextProvider
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </p.PlasmicDataSourceContextProvider>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input3: makeNodeComponent("input3"),
    input4: makeNodeComponent("input4"),
    input5: makeNodeComponent("input5"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
